{
  // #region File Inclusion

  // Specifies an allowlist of files to include in the program.
  // https://www.typescriptlang.org/tsconfig#files
  // "files": [],

  // Specifies an array of filenames or patterns to include in the program.
  // https://www.typescriptlang.org/tsconfig#include
  // "include": [],

  // Specifies an array of filenames or patterns that should be skipped when resolving include.
  // https://www.typescriptlang.org/tsconfig#exclude
  // "exclude": [],

  // The value of extends is a string which contains a path to another configuration file to inherit from.
  // https://www.typescriptlang.org/tsconfig#extends
  // "extends": undefined,

  // Automatically load type definitions.
  // https://www.typescriptlang.org/tsconfig#typeAcquisition
  // "typeAcquisition": true,

  // Structure your TypeScript programs into smaller pieces.
  // https://www.typescriptlang.org/tsconfig#references
  // "references": [],
  // #endregion File Inclusion

  // #region Project Options
  "compilerOptions": {
    // Tells TypeScript to save information about the project graph from the last compilation to files stored on disk.
    // https://www.typescriptlang.org/tsconfig#incremental
    "incremental": true,

    // Specify ECMAScript target version.
    // https://www.typescriptlang.org/tsconfig#target
    "target": "esnext",

    // Specify module code generation.
    // https://www.typescriptlang.org/tsconfig#module
    "module": "esnext",

    // Specify library files to be included in the compilation.
    // https://www.typescriptlang.org/tsconfig#lib
    // "lib": [],

    // Allow javascript files to be compiled.
    // https://www.typescriptlang.org/tsconfig#allowJs
    "allowJs": true,

    // Report errors in .js files.
    // https://www.typescriptlang.org/tsconfig#checkJs
    "checkJs": true,

    // Controls how JSX constructs are emitted in JavaScript files.
    // https://www.typescriptlang.org/tsconfig#jsx
    "jsx": "preserve",

    // Generates corresponding '.d.ts' file.
    // https://www.typescriptlang.org/tsconfig#declaration
    // "declaration": true,

    // Generates a sourcemap for each corresponding '.d.ts' file.
    // https://www.typescriptlang.org/tsconfig#declarationMap
    // "declarationMap": false,

    // Generates corresponding '.map' file.
    // https://www.typescriptlang.org/tsconfig#sourceMap
    // "sourceMap": false,

    // Concatenate and emit output to single file.
    // https://www.typescriptlang.org/tsconfig#outFile
    // "outFile": undefined,

    // Redirect output structure to the directory.
    // https://www.typescriptlang.org/tsconfig#outDir
    // "outDir": undefined,

    // Specify the root directory of input files. Use to control the output directory structure with --outDir.
    // https://www.typescriptlang.org/tsconfig#rootDir
    // "rootDir": undefined,

    // Enable project compilation.
    // https://www.typescriptlang.org/tsconfig#composite
    // "composite": true,

    // Specify file to store incremental compilation information.
    // https://www.typescriptlang.org/tsconfig#tsBuildInfoFile
    // "tsBuildInfoFile": ".tsbuildinfo",

    // Strips all comments from TypeScript files when converting into JavaScript.
    // https://www.typescriptlang.org/tsconfig#removeComments
    // "removeComments": false,

    // Do not emit compiler output files like JavaScript source code, source-maps or declarations.
    // https://www.typescriptlang.org/tsconfig#noEmit
    "noEmit": true,

    // Import emit helpers from 'tslib'.
    // https://www.typescriptlang.org/tsconfig#importHelpers
    "importHelpers": true,

    // Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.
    // https://www.typescriptlang.org/tsconfig#downlevelIteration
    // "downlevelIteration": false,

    // Transpile each file as a separate module (similar to 'ts.transpileModule').
    // NOTE: This disallows features that require cross-file information for emit. (babel)
    // https://www.typescriptlang.org/tsconfig#isolatedModules
    "isolatedModules": true,

    // List of language service plugins to run inside the editor.
    // https://www.typescriptlang.org/tsconfig#plugins
    // "plugins": [],
    // #endregion Project Options

    // #region Strict Checks

    // Enable all strict type-checking options.
    // https://www.typescriptlang.org/tsconfig#strict
    // "strict": false,

    // Raise error on expressions and declarations with an implied 'any' type.
    // https://www.typescriptlang.org/tsconfig#noImplicitAny
    // "noImplicitAny": false,

    // When strictNullChecks is false, null and undefined are effectively ignored by the language. This can lead to unexpected errors at runtime.
    // https://www.typescriptlang.org/tsconfig#strictNullChecks
    "strictNullChecks": true,

    // When enabled, this flag causes functions parameters to be checked more correctly.
    // https://www.typescriptlang.org/tsconfig#strictFunctionTypes
    "strictFunctionTypes": true,

    // When set, TypeScript will check that the built-in methods of functions call, bind, and apply are invoked with correct argument for the underlying function.
    // https://www.typescriptlang.org/tsconfig#strictBindCallApply
    "strictBindCallApply": true,

    // When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.
    // https://www.typescriptlang.org/tsconfig#strictPropertyInitialization
    "strictPropertyInitialization": true,

    // Raise error on ‘this’ expressions with an implied ‘any’ type.
    // https://www.typescriptlang.org/tsconfig#noImplicitThis
    "noImplicitThis": true,

    // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
    // https://www.typescriptlang.org/tsconfig#alwaysStrict
    "alwaysStrict": true,
    // #endregion Strict Checks

    // #region Module Resolution
    // "Specify module resolution strategy": ‘node’ (Node.js) or ‘classic’ (TypeScript pre-1.6).
    // https://www.typescriptlang.org/tsconfig#moduleResolution
    "moduleResolution": "node",

    // Lets you set a base directory to resolve non-absolute module names.
    // https://www.typescriptlang.org/tsconfig#baseUrl
    // "baseUrl": "./",

    // A series of entries which re-map imports to lookup locations relative to the baseUrl.
    // https://www.typescriptlang.org/tsconfig#paths
    // "paths": {},

    // List of root folders whose combined content represents the structure of the project at runtime.
    // https://www.typescriptlang.org/tsconfig#rootDirs
    // "rootDirs": [],

    // List of folders to include type definitions from.
    // https://www.typescriptlang.org/tsconfig#typeRoots
    // "typeRoots": ["node_modules/@types/"],

    // Type declaration files to be included in compilation.
    // https://www.typescriptlang.org/tsconfig#types
    // "types": [],

    // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    // https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports
    // "allowSyntheticDefaultImports": false,

    // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports.
    // https://www.typescriptlang.org/tsconfig#esModuleInterop
    "esModuleInterop": true,

    // Do not resolve the real path of symlinks.
    // https://www.typescriptlang.org/tsconfig#preserveSymlinks
    // "preserveSymlinks": false,

    // Allow accessing UMD globals from modules.
    // https://www.typescriptlang.org/tsconfig#allowUmdGlobalAccess
    // "allowUmdGlobalAccess": false,
    // #endregion Module Resolution

    // #region Source Maps
    // Specify the location where a debugger should locate TypeScript files instead of relative source locations.
    // https://www.typescriptlang.org/tsconfig#sourceRoot
    // "sourceRoot": undefined,

    // Specify the location where debugger should locate map files instead of generated locations.
    // https://www.typescriptlang.org/tsconfig#mapRoot
    // "mapRoot": undefined,

    // Emit a single file with source maps instead of having a separate file.
    // https://www.typescriptlang.org/tsconfig#inlineSourceMap
    // "inlineSourceMap": false,

    // Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.
    // https://www.typescriptlang.org/tsconfig#inlineSources
    // "inlineSources": false,
    // #endregion Source Maps

    // #region Linter Checks
    // Report errors on unused local variables.
    // https://www.typescriptlang.org/tsconfig#noUnusedLocals
    // "noUnusedLocals": false,

    // Report errors on unused parameters in functions.
    // https://www.typescriptlang.org/tsconfig#noUnusedParameters
    // "noUnusedParameters": false,

    // When enabled, TypeScript will check all code paths in a function to ensure they return a value.
    // https://www.typescriptlang.org/tsconfig#noImplicitReturns
    // "noImplicitReturns": false,

    // Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break or return. This means you won’t accidentally ship a case fallthrough bug.
    // https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch
    // "noFallthroughCasesInSwitch": false,
    // #endregion Linter Checks

    // #region Experimental
    // Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.
    // https://www.typescriptlang.org/tsconfig#experimentalDecorators
    // "experimentalDecorators": false,

    // Enables experimental support for emitting type metadata for decorators which works with the module reflect-metadata.
    // https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata
    // ""emitDecoratorMetadata"": false,
    // #endregion Experimental
    // #region Advanced

    // Print names of files part of the compilation. This is useful when you are not sure that TypeScript has included a file you expected.
    // https://www.typescriptlang.org/tsconfig#listFiles
    // "listFiles": false,

    // Print names of generated files part of the compilation to the terminal.
    // https://www.typescriptlang.org/tsconfig#listEmittedFiles
    // "listEmittedFiles": false,

    // When you are trying to debug why a module isn’t being included.
    // https://www.typescriptlang.org/tsconfig#traceResolution
    // "traceResolution": false,

    // Used to output diagnostic information for debugging.
    // https://www.typescriptlang.org/tsconfig#diagnostics
    // "diagnostics": false,

    // You can use this flag to discover where TypeScript is spending it’s time when compiling.
    // https://www.typescriptlang.org/tsconfig#extendedDiagnostics
    // "extendedDiagnostics": false,

    // This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run.
    // https://www.typescriptlang.org/tsconfig#generateCpuProfile
    // "generateCpuProfile": "profile.cpuprofile",

    // Avoid rechecking/rebuilding all truly possibly-affected files, only recheck/rebuild files that have changed as well as files that directly import them.
    // https://www.typescriptlang.org/tsconfig#assumeChangesOnlyAffectDirectDependencies
    // "assumeChangesOnlyAffectDirectDependencies": false,

    // Only emit .d.ts files; do not emit .js files.
    // https://www.typescriptlang.org/tsconfig#emitDeclarationOnly
    // "emitDeclarationOnly": false,

    // This flag controls how import works, there are 3 different options:
    // https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues
    // "importsNotUsedAsValues": "remove",

    // Changes the function called in .js files when compiling JSX Elements.
    // https://www.typescriptlang.org/tsconfig#jsxFactory
    // "jsxFactory": "React"",

    // Allows importing modules with a ‘.json’ extension, which is a common practice in node projects.
    // https://www.typescriptlang.org/tsconfig#resolveJsonModule
    "resolveJsonModule": true,

    // Controls whether TypeScript will emit a byte order mark (BOM) when writing output files.
    // https://www.typescriptlang.org/tsconfig#emitBOM
    // "emitBOM": false,

    // "Specify the end of line sequence to be used when emitting files": ‘CRLF’ (dos) or ‘LF’ (unix).
    // https://www.typescriptlang.org/tsconfig#newLine
    // "newLine": undefined,

    // Disables the automatic inclusion of any library files. If this option is set, lib is ignored.
    // https://www.typescriptlang.org/tsconfig#noLib
    // "noLib": false,

    // By default, TypeScript will examine the initial set of files for import and <reference directives and add these resolved files to your program.
    // https://www.typescriptlang.org/tsconfig#noResolve
    // "noResolve": false,

    // Do not emit declarations for code that has an @internal annotation in it’s JSDoc comment.
    // https://www.typescriptlang.org/tsconfig#stripInternal
    // "stripInternal": false,

    // Disable upper limit of the amount of memory TypeScript can allocate.
    // https://www.typescriptlang.org/tsconfig#disableSizeLimit
    // "disableSizeLimit": false,

    // Use the pre-3.7 behavior where d.ts files were used to as the boundaries between modules.
    // https://www.typescriptlang.org/tsconfig#disableSourceOfProjectReferenceRedirect
    // "disableSourceOfProjectReferenceRedirect": false,

    // Do not include a project when using features like find all references or jump to definition in an editor.
    // https://www.typescriptlang.org/tsconfig#disableSolutionSearching
    // "disableSolutionSearching": false,

    // Disable emiting "use strict"; at the top of the file.
    // https://www.typescriptlang.org/tsconfig#noImplicitUseStrict
    // "noImplicitUseStrict": false,

    // Instead of importing helpers with importHelpers, you can provide implementations in the global scope for the helpers you use.
    // https://www.typescriptlang.org/tsconfig#noEmitHelpers
    // "noEmitHelpers": false,

    // Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.
    // https://www.typescriptlang.org/tsconfig#noEmitOnError
    // "noEmitOnError": false,

    // Do not erase const enum declarations in generated code.
    // https://www.typescriptlang.org/tsconfig#preserveConstEnums
    // "preserveConstEnums": false,

    // Offers a way to configure the root directory for where declaration files are emitted.
    // https://www.typescriptlang.org/tsconfig#declarationDir
    // "declarationDir": undefined,

    // Skip type checking of declaration files.
    // https://www.typescriptlang.org/tsconfig#skipLibCheck
    "skipLibCheck": true,

    // Set to false to disable warnings about unused labels.
    // https://www.typescriptlang.org/tsconfig#allowUnusedLabels
    // "allowUnusedLabels": false,

    // Disable warnings about unreachable code.
    // https://www.typescriptlang.org/tsconfig#allowUnreachableCode
    "allowUnreachableCode": true,

    // This disables reporting of excess property errors
    // https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors
    // "suppressExcessPropertyErrors": false,

    // Suppresses reporting the error about implicit anys when indexing into objects.
    // https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors
    // "suppressImplicitAnyIndexErrors": false,

    // Disallow inconsistently-cased references to the same file.
    // https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames
    "forceConsistentCasingInFileNames": true

    // The maximum dependency depth to search under node_modules and load JavaScript files.
    // https://www.typescriptlang.org/tsconfig#maxNodeModuleJsDepth
    // "maxNodeModuleJsDepth": 0,

    // TypeScript will unify type parameters when comparing two generic functions.
    // https://www.typescriptlang.org/tsconfig#noStrictGenericChecks
    // "noStrictGenericChecks": false,

    // This flag is used as part of migrating to the upcoming standard version of class fields.
    // https://www.typescriptlang.org/tsconfig#useDefineForClassFields
    // "useDefineForClassFields": false,

    // This flag changes the keyof type operator to return string instead of string | number when applied to a type with a string index signature.
    // https://www.typescriptlang.org/tsconfig#keyofStringsOnly
    // "keyofStringsOnly": false,
    // #endregion Advanced
  }
}
